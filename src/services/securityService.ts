import { supabase } from '@/integrations/supabase/client';

export interface SecurityFixResult {
  success: boolean;
  message: string;
  details?: any;
}

export const securityService = {
  /**
   * Aplica corre√ß√µes de seguran√ßa cr√≠ticas nas fun√ß√µes do banco
   */
  async applySecurityFixes(): Promise<SecurityFixResult> {
    try {
      console.log('üîÑ SecurityService: Aplicando corre√ß√µes de seguran√ßa');
      
      // Fase 1: Corre√ß√£o das fun√ß√µes cr√≠ticas com SECURITY DEFINER
      const functionsToFix = [
        'sync_user_tables',
        'create_admin_user', 
        'is_super_user',
        'handle_new_user',
        'is_admin',
        'prevent_privilege_escalation',
        'is_current_user_admin',
        'can_modify_user',
        'delete_user_by_id',
        'check_permission',
        'update_role_permissions',
        'soft_delete_record',
        'restore_record',
        'update_payrolls_updated_at',
        'auto_distribute_allocation',
        'get_employee_ranking'
      ];

      const results = [];
      
      for (const funcName of functionsToFix) {
        try {
          // Verificar se a fun√ß√£o existe
          const { data: funcExists } = await supabase.rpc('check_function_exists', {
            function_name: funcName
          });
          
          if (funcExists) {
            // Aplicar SECURITY DEFINER e SET search_path
            const { error } = await supabase.rpc('apply_security_definer', {
              function_name: funcName
            });
            
            if (error) {
              console.error(`‚ùå SecurityService: Erro ao corrigir fun√ß√£o ${funcName}:`, error);
              results.push({ function: funcName, status: 'error', error: error.message });
            } else {
              console.log(`‚úÖ SecurityService: Fun√ß√£o ${funcName} corrigida com sucesso`);
              results.push({ function: funcName, status: 'success' });
            }
          } else {
            console.log(`‚ö†Ô∏è SecurityService: Fun√ß√£o ${funcName} n√£o encontrada`);
            results.push({ function: funcName, status: 'not_found' });
          }
        } catch (error) {
          console.error(`‚ùå SecurityService: Erro ao processar fun√ß√£o ${funcName}:`, error);
          results.push({ function: funcName, status: 'error', error: error });
        }
      }
      
      console.log('‚úÖ SecurityService: Corre√ß√µes de seguran√ßa aplicadas');
      return {
        success: true,
        message: 'Corre√ß√µes de seguran√ßa aplicadas',
        details: results
      };
      
    } catch (error) {
      console.error('‚ùå SecurityService: Erro ao aplicar corre√ß√µes de seguran√ßa:', error);
      return {
        success: false,
        message: 'Erro ao aplicar corre√ß√µes de seguran√ßa',
        details: error
      };
    }
  },

  /**
   * Otimiza pol√≠ticas RLS para melhor performance
   */
  async optimizeRLSPolicies(): Promise<SecurityFixResult> {
    try {
      console.log('üîÑ SecurityService: Otimizando pol√≠ticas RLS');
      
      // Executar otimiza√ß√µes de RLS usando fun√ß√£o SQL
      const { error } = await supabase.rpc('optimize_rls_policies');
      
      if (error) {
        console.error('‚ùå SecurityService: Erro ao otimizar pol√≠ticas RLS:', error);
        return {
          success: false,
          message: 'Erro ao otimizar pol√≠ticas RLS',
          details: error
        };
      }
      

      return {
        success: true,
        message: 'Pol√≠ticas RLS otimizadas com sucesso'
      };
      
    } catch (error) {

      return {
        success: false,
        message: 'Erro ao otimizar pol√≠ticas RLS',
        details: error
      };
    }
  },

  /**
   * Remove √≠ndices n√£o utilizados para otimiza√ß√£o
   */
  async removeUnusedIndexes(): Promise<SecurityFixResult> {
    try {

      
      // Lista de √≠ndices identificados como n√£o utilizados
      const unusedIndexes = [
        'idx_vacation_requests_employee_id',
        'idx_criterion_evaluations_evaluation_id',
        'idx_documents_employee_id',
        'idx_employee_benefits_employee_id',
        'idx_evaluations_employee_id',
        'idx_folha_pagamento_employee_id',
        'idx_folha_rateio_payroll_id',
        'idx_incidents_employee_id',
        'idx_nps_responses_survey_id',
        'idx_recognition_criteria_program_id',
        'idx_roles_department_id',
        'idx_schedule_events_employee_id',
        'idx_system_role_permissions_role_id',
        'idx_user_roles_user_id',
        'idx_benefit_documents_employee_id',
        'idx_users_auth_user_id',
        'idx_security_audit_log_user_id'
      ];
      
      const results = [];
      
      for (const indexName of unusedIndexes) {
        try {
          const { error } = await supabase.rpc('drop_index_if_exists', {
            index_name: indexName
          });
          
          if (error) {

            results.push({ index: indexName, status: 'error', error: error.message });
          } else {

            results.push({ index: indexName, status: 'removed' });
          }
        } catch (error) {

          results.push({ index: indexName, status: 'error', error: error });
        }
      }
      
      return {
        success: true,
        message: 'Remo√ß√£o de √≠ndices n√£o utilizados conclu√≠da',
        details: results
      };
      
    } catch (error) {

      return {
        success: false,
        message: 'Erro ao remover √≠ndices n√£o utilizados',
        details: error
      };
    }
  },

  /**
   * Executa verifica√ß√£o de seguran√ßa p√≥s-corre√ß√µes
   */
  async verifySecurityConfiguration(): Promise<SecurityFixResult> {
    try {

      
      const { data, error } = await supabase.rpc('verify_security_configuration');
      
      if (error) {

        return {
          success: false,
          message: 'Erro ao verificar configura√ß√µes de seguran√ßa',
          details: error
        };
      }
      

      return {
        success: true,
        message: 'Verifica√ß√£o de seguran√ßa conclu√≠da',
        details: data
      };
      
    } catch (error) {

      return {
        success: false,
        message: 'Erro na verifica√ß√£o de seguran√ßa',
        details: error
      };
    }
  },

  /**
   * Executa todas as corre√ß√µes de seguran√ßa em sequ√™ncia
   */
  async executeFullSecurityPlan(): Promise<SecurityFixResult[]> {

    
    const results: SecurityFixResult[] = [];
    
    // Fase 1: Corre√ß√µes cr√≠ticas de seguran√ßa

    const securityFixes = await this.applySecurityFixes();
    results.push(securityFixes);
    
    // Fase 2: Otimiza√ß√£o de pol√≠ticas RLS

    const rlsOptimization = await this.optimizeRLSPolicies();
    results.push(rlsOptimization);
    
    // Fase 3: Remo√ß√£o de √≠ndices n√£o utilizados

    const indexCleanup = await this.removeUnusedIndexes();
    results.push(indexCleanup);
    
    // Fase 4: Verifica√ß√£o final

    const verification = await this.verifySecurityConfiguration();
    results.push(verification);
    

    return results;
  }
};